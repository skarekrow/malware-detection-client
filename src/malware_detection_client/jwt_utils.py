import os
import json
from malware_detection_client.utils import logger


def load_jwt_token():
    """
    Load the JWT token from the user's jwt_token_cache, if the file exists
    and if the token hasn't expired
    """
    from datetime import datetime
    try:
        import jwt
    except ImportError:
        import sys
        version = sys.version_info[0]
        logger.error("JWT module is missing.  Either yum install %s package or pip install PyJWT"
                     % ('python3-jwt' if version == 3 else 'python-jwt'))
        sys.exit(1)

    jwt_token_cache = get_jwt_token_cache()
    try:
        token = json.loads(open(jwt_token_cache).read())
        decoded_token = jwt.decode(token['cs_jwt'], options={'verify_signature': False}, verify=False)
        token_expiry = datetime.utcfromtimestamp(decoded_token['exp'])
        if token_expiry <= datetime.utcnow():
            logger.debug("Locally stored JWT token has expired, requesting a new one")
            return None
        logger.debug("Loaded JWT token from %s" % jwt_token_cache)
        return token
    except Exception as e:
        logger.debug("Unable to load JWT token from %s: %s" % (jwt_token_cache, str(e)))
        return None


def save_jwt_token(jwt_token):
    """
    Save the JWT token to the user's jwt_token_cache
    """
    jwt_token_cache = get_jwt_token_cache()
    try:
        logger.debug("Saving JWT token to %s" % jwt_token_cache)
        with open(jwt_token_cache, 'w', 0o600) as cache:
            cache.write(json.dumps(jwt_token))
    except Exception as e:
        logger.debug("Unable to write JWT token to %s: %s" % (jwt_token_cache, str(e)))


def get_jwt_token_cache():
    """
    Get the filename where the JWT token is stored
    """
    from pwd import getpwuid
    user_home_dir = os.getenv('HOME') if os.getenv('HOME') else getpwuid(os.getuid()).pw_dir
    if not user_home_dir or user_home_dir == '/':
        user_home_dir = '/tmp'
    user_conf_dir = os.path.join(user_home_dir, '.config/malware-detection-client')
    if not os.path.exists(user_conf_dir):
        os.makedirs(user_conf_dir, 0o700)
    return os.path.join(user_conf_dir, 'jwt_token_cache')
