from malware_detection_client import MalwareDetectionClient
from .constants import *


class TestLineNumberMetadata:

    def test_rule_rule_scan_another_matching_entity(self):
        # Similar to test_contrived_scan_output_metadata in test_parse_scan_output.py ...
        # But this time using a actual rule file RULE_RULE scanning an actual file ANOTHER_MATCHING_ENTITY_FILE
        # The rule file was constructed so that it will produce the same output as in the CONTRIVED_SCAN_OUTPUT
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, rules_location=RULE_RULE,
                                     scan_entity=ANOTHER_MATCHING_ENTITY_FILE, debug=True)
        mdc.scan_filesystem()

        # 11 matching strings for 'Rule' in ANOTHER_MATCHING_ENTITY_FILE
        # but only 10 recorded because of string_match_limit of 10
        rule_match = mdc.host_scan['Rule']
        assert len(rule_match) == 10

        assert rule_match[0]['source'] == ANOTHER_MATCHING_ENTITY_FILE
        assert rule_match[0][
                   'string_data'] == "string match containing error scanning but it's ok because its not in a rule line"
        assert rule_match[0]['string_identifier'] == '$match3'
        assert rule_match[0]['string_offset'] == 2
        metadata = rule_match[0]['metadata']
        assert metadata['source_type'] == 'file'
        assert metadata['file_type'] == 'ASCII text'
        assert metadata['mime_type'] == 'text/plain; charset=us-ascii'
        assert metadata['md5sum'] == '64764d295e92ffeec36d3fcd646a3af4'
        assert metadata['line_number'] == 3
        assert metadata['line'] == urlencode(
            "string match containing error scanning but it's ok because its not in a rule line")

        assert rule_match[1]['source'] == ANOTHER_MATCHING_ENTITY_FILE
        assert rule_match[1]['string_data'] == "contains ="
        assert rule_match[1]['string_identifier'] == '$grep1'
        assert rule_match[1]['string_offset'] == 97
        metadata = rule_match[1]['metadata']
        assert metadata['md5sum'] == '64764d295e92ffeec36d3fcd646a3af4'
        assert metadata['line_number'] == 7
        assert metadata['line'] == urlencode("This line contains = char")

        assert rule_match[3]['source'] == ANOTHER_MATCHING_ENTITY_FILE
        assert rule_match[3]['string_data'] == "contains .+"
        assert rule_match[3]['string_identifier'] == '$grep2'
        assert rule_match[3]['string_offset'] == 153
        metadata = rule_match[3]['metadata']
        assert metadata['line_number'] == 9
        assert metadata['line'] == urlencode("This line contains .+ chars")

        assert rule_match[5]['source'] == ANOTHER_MATCHING_ENTITY_FILE
        assert rule_match[5]['string_data'] == 'contains "'
        assert rule_match[5]['string_identifier'] == '$grep3'
        assert rule_match[5]['string_offset'] == 213
        metadata = rule_match[5]['metadata']
        assert metadata['line_number'] == 11
        assert metadata['line'] == urlencode('This line contains "" chars')

        assert rule_match[6]['source'] == ANOTHER_MATCHING_ENTITY_FILE
        assert rule_match[6]['string_data'] == "contains '"
        assert rule_match[6]['string_identifier'] == '$grep4'
        assert rule_match[6]['string_offset'] == 241
        metadata = rule_match[6]['metadata']
        assert metadata['line_number'] == 12
        assert metadata['line'] == urlencode("This line contains '' chars")

        assert rule_match[7]['source'] == ANOTHER_MATCHING_ENTITY_FILE
        assert rule_match[7]['string_data'] == 'contains ()[]'
        assert rule_match[7]['string_identifier'] == '$grep5'
        assert rule_match[7]['string_offset'] == 269
        metadata = rule_match[7]['metadata']
        assert metadata['line_number'] == 13
        assert metadata['line'] == urlencode("This line contains ()[] chars")

        assert rule_match[8]['source'] == ANOTHER_MATCHING_ENTITY_FILE
        assert rule_match[8]['string_data'] == 'contains {'
        assert rule_match[8]['string_identifier'] == '$grep6'
        assert rule_match[8]['string_offset'] == 299
        metadata = rule_match[8]['metadata']
        assert metadata['line_number'] == 14
        assert metadata['line'] == urlencode("This line contains {} chars")

        assert rule_match[9]['source'] == ANOTHER_MATCHING_ENTITY_FILE
        assert rule_match[9]['string_data'] == 'contains ^$'
        assert rule_match[9]['string_identifier'] == '$grep7'
        assert rule_match[9]['string_offset'] == 327
        metadata = rule_match[9]['metadata']
        assert metadata['line_number'] == 15
        assert metadata['line'] == urlencode("This line contains ^$ chars")

        # Only 10 rule matches because string_match_limit is 10
        assert len(rule_match) == 10

    def test_rule_metadata_test_scanning_itself(self):
        # Taking some complicated rule strings to make sure grepping for line numbers is working correctly
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, rules_location=RULE_METADATA_TEST,
                                     scan_entity=RULE_METADATA_TEST, debug=True)
        mdc.scan_filesystem()
        rule_match = mdc.host_scan['MetadataTestRule']

        assert rule_match[0]['source'] == RULE_METADATA_TEST
        assert rule_match[0]['string_data'] == 'echo -e "[-] Ping \\033[31m${host_name}\\033[0m bad"'
        assert rule_match[0]['string_identifier'] == '$s1'
        assert rule_match[0]['string_offset'] == 392
        metadata = rule_match[0]['metadata']
        assert metadata['source_type'] == 'file'
        assert metadata['file_type'] == 'UTF-8 Unicode text'
        assert metadata['mime_type'] == 'text/plain; charset=utf-8'
        assert metadata['md5sum'] == '227429b142ad425733fe155386d4a405'
        assert metadata['line_number'] == 9
        assert metadata['line'] == urlencode('Testing $s1 = "echo -e "[-] Ping \\033[31m${host_name}\\033[0m bad"" ascii fullword')

        assert rule_match[1]['source'] == RULE_METADATA_TEST
        assert rule_match[1]['string_data'] == '"${user_name}"@"${host_name}" -p "${port}'
        assert rule_match[1]['string_identifier'] == '$s2'
        assert rule_match[1]['string_offset'] == 478
        metadata = rule_match[1]['metadata']
        assert metadata['line_number'] == 10
        assert metadata['line'] == urlencode('Testing $s2 = ""${user_name}"@"${host_name}" -p "${port}" ascii fullword')

        assert rule_match[2]['source'] == RULE_METADATA_TEST
        assert rule_match[2]['string_data'] == """'$password' &" <<< GMANcode27'"""
        assert rule_match[2]['string_identifier'] == '$s3'
        assert rule_match[2]['string_offset'] == 555
        metadata = rule_match[2]['metadata']
        assert metadata['line_number'] == 11
        assert metadata['line'] == urlencode("""Testing $s3 = "'$password' &" <<< GMANcode27'" ascii fullword""")

        assert rule_match[3]['source'] == RULE_METADATA_TEST
        assert rule_match[3]['string_data'] == "for ssh_creds in ${allThreads[@]}; do"
        assert rule_match[3]['string_identifier'] == '$s4'
        assert rule_match[3]['string_offset'] == 119
        metadata = rule_match[3]['metadata']
        assert metadata['line_number'] == 4
        assert metadata['line'] == urlencode('Testing $s4 = "for ssh_creds in ${allThreads[@]}; do" ascii fullword')

        assert rule_match[4]['source'] == RULE_METADATA_TEST
        assert rule_match[4]['string_data'] == "for ssh_creds in ${allThreads[@]}; do"
        assert rule_match[4]['string_identifier'] == '$s4'
        assert rule_match[4]['string_offset'] == 1034
        metadata = rule_match[4]['metadata']
        assert metadata['line_number'] == 21
        assert metadata['line'] == urlencode('$s4 = "for ssh_creds in ${allThreads[@]}; do" ascii fullword')

        assert rule_match[5]['source'] == RULE_METADATA_TEST
        assert rule_match[5]['string_data'] == '"text=$MSG" "$MSG_URL$id&"'
        assert rule_match[5]['string_identifier'] == '$s5'
        assert rule_match[5]['string_offset'] == 621
        metadata = rule_match[5]['metadata']
        assert metadata['line_number'] == 12
        assert metadata['line'] == urlencode('Testing $s5 = ""text=$MSG" "$MSG_URL$id&"" ascii fullword')

        # Cannot match line_numbers for this rule due to non-ascii chars
        assert rule_match[6]['source'] == RULE_METADATA_TEST
        assert rule_match[6]['string_data'] == "--exclude=\\*.\\xE2\\x98\\xA2 -l"
        assert rule_match[6]['string_identifier'] == '$s6'
        assert rule_match[6]['string_offset'] == 683
        metadata = rule_match[6]['metadata']
        assert all([key not in ['line_number', 'line'] for key in metadata.keys()])

        assert rule_match[7]['source'] == RULE_METADATA_TEST
        assert rule_match[7]['string_data'] == "--include=\\*.{txt,sh,exe}"
        assert rule_match[7]['string_identifier'] == '$s7'
        assert rule_match[7]['string_offset'] == 732
        metadata = rule_match[7]['metadata']
        assert metadata['line_number'] == 14
        assert metadata['line'] == urlencode(r'Testing $s7 = "--include=\*.{txt,sh,exe}" ascii fullword')

        assert rule_match[8]['source'] == RULE_METADATA_TEST
        assert rule_match[8]['string_data'] == "allThreads=($1)"
        assert rule_match[8]['string_identifier'] == '$s8'
        assert rule_match[8]['string_offset'] == 192
        metadata = rule_match[8]['metadata']
        assert metadata['line_number'] == 5
        assert metadata['line'] == urlencode('Testing $s8 = "allThreads=($1)" ascii fullword')

        assert rule_match[9]['source'] == RULE_METADATA_TEST
        assert rule_match[9]['string_data'] == "allThreads=($1)"
        assert rule_match[9]['string_identifier'] == '$s8'
        assert rule_match[9]['string_offset'] == 1269
        metadata = rule_match[9]['metadata']
        assert metadata['line_number'] == 25
        assert metadata['line'] == urlencode('$s8 = "allThreads=($1)" ascii fullword')

        # Only 10 rule matches because string_match_limit is 10
        assert len(rule_match) == 10
