from malware_detection_client import MalwareDetectionClient
from .test_constants import *


CONTRIVED_SCAN_OUTPUT = """
error scanning this line, it will be skipped
this line also contains error scanning so it will be skipped too
0x1:$string1: skip me coz the rule line had an error
0x11:$string2: skip me too
0x111:$string3: skip me three
this line doesn't contain e-r-r-o-r s-c-a-n-n-i-n-g so will be considered a scan match, even though it shouldn't
0x123:$match: matches 'this' rule
BadFormat
0x1:$skipme: the previous line will fail because it doesn't follow the 'rule matching_entity' format
rule:matching_entity
0x1:$alsoskipme: the previous line also fails because it has a ":" instead of a " " between rule & matching_entity
rule matching_entity
0x0:$match0: string match in the file "matching_entity"
0x1:$match1: another string match in matching_entity
0x2:$match2: string with different types of quotes 'here' and "here"
rule another matching_entity
0x3:$match3: string match containing error scanning but it's ok because its not in a rule line
rule matching_entity_3, but without any string matches - yes that's ok
more error scanning this line
another_matching_rule /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/signal-desktop/350/opt/Signal/resources/app.asar
0x212f197:$s0: #!/bin/sh
0x2130313:$s0: #!/bin/sh
0x39f7cc6:$s0: #!/bin/sh
another_matching_rule /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859error scanning /dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/signal-desktop/350/opt/Signal/resources/app2.asar
0x212f197:$s0: #!/bin/sh
0x2130313:$s0: #!/bin/sh
0x39f7cc6:$s0: #!/bin/sh
another_matching_rule 12345
0x0:$s0: #!/bin/sh
"""

MATCHES_DIRECTORY_SCAN_OUTPUT = """
error scanning matches/kcore: error: 4
XFTI_brootkit matches/brootkit_match
0x0:$hdr: #!/
0x1a:$path: BR_ROOTKIT_PATH
0x11:$br_brootkit: brootkit
0x2a:$br_brootkit: brootkit
XFTI_FinSpy matches/finspy_match
0x18:$fin_unpacked1: fin_conn_
0x24:$fin_unpacked2: fin_relay_
0x31:$fin_unpacked3: fin_util_
0x3d:$fin_unpacked4: fin_read_
0x49:$fin_unpacked5: fin_conf
0xf:$fin_unpacked6: FinSpy
0x54:$fin_unpacked6: finspy
XFTI_FritzFrog matches/fritzfrog_match
0x0:$ELF_hdr: 7F 45 4C 46
0xee:$golang: /usr/lib/golang/src/
0x7a:$cmd_getbin: main.getbin
0x8a:$cmd_getstats: main.getstats
0xa2:$cmd_getpeerstats: main.getpeerstats
0xbe:$cmd_getblobstats: main.getblobstats
0xda:$cmd_getvotestats: main.getvotestats
XFTI_Mirai matches/mirai_match
0x1:$magic: 45 4C 46
0x1a:$string_2: GET /cgi-bin/nobody/
0x30:$string_3: POST /UD/?5 HTTP/1.1
0x46:$string_4: str=Lw==&username=admin
0x5f:$string_5: 20Account.User1.Password%3E
"""

ERROR_SCAN_OUTPUT = """
error scanning /var/lib/snapd//snap/core/10859/dev/core: could not open file
error scanning /var/lib/snapd//snap/core/10859/dev/fd/3/cookie/snap.core: could not open file
error scanning /var/lib/snapd//cookie/snap.gnome-3-28-1804: could not open file
error scanning /var/lib/snapd//device/private-keys-v1/_53ir43FCxbgdSyj8NriGt9gfonABhzHHhsGnGhvjqpK_hwdIcP0ScJpKppzEhps: could not open file
"""

ERROR4_SCAN_OUTPUT = """
error scanning /var/lib/snapd/snap/core/10859/dev/core: error: 4
error scanning /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/core: error: 4
error scanning /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/core: error: 4
error scanning /var/lib/snapd/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/fd/3/snap/core/10859/dev/core: error: 4
"""

RANDOM_OUTPUT = """
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Dictum at tempor commodo ullamcorper a lacus vestibulum sed. Non odio euismod lacinia at quis risus sed.
"""


class TestParseScanOutput:

    def test_contrived_scan_output(self):
        mdc = MalwareDetectionClient(conf_file=CONF_FILE)
        mdc.parse_scan_output(CONTRIVED_SCAN_OUTPUT)
        # 1 match for rule 'this', 3 matches for rule 'rule', 2 matches for rule 'another_matching_rule'
        assert mdc.matches == 6

        # 1 matching string for 'this'
        rule_match = mdc.host_scan['this']
        assert len(rule_match) == 1
        assert 'e-r-r-o-r s-c-a-n-n-i-n-g' in rule_match[0]['source']
        assert rule_match[0]['string_data'] == " matches 'this' rule"
        assert rule_match[0]['string_identifier'] == '$match'
        assert rule_match[0]['string_offset'] == 291

        # 5 matching strings for 'rule'
        rule_match = mdc.host_scan['rule']
        assert len(rule_match) == 5
        assert rule_match[0]['source'] == 'matching_entity'
        assert rule_match[0]['string_data'] == ' string match in the file "matching_entity"'
        assert rule_match[0]['string_identifier'] == '$match0'
        assert rule_match[0]['string_offset'] == 0
        assert rule_match[1]['source'] == 'matching_entity'
        assert rule_match[1]['string_data'] == " another string match in matching_entity"
        assert rule_match[1]['string_identifier'] == '$match1'
        assert rule_match[1]['string_offset'] == 1
        assert rule_match[2]['source'] == 'matching_entity'
        assert rule_match[2]['string_data'] == ' string with different types of quotes \'here\' and "here"'
        assert rule_match[2]['string_identifier'] == '$match2'
        assert rule_match[2]['string_offset'] == 2
        assert rule_match[3]['source'] == 'another matching_entity'
        assert rule_match[3]['string_data'] == " string match containing error scanning but it's ok because its not in a rule line"
        assert rule_match[3]['string_identifier'] == '$match3'
        assert rule_match[3]['string_offset'] == 3
        assert rule_match[4]['source'].startswith('matching_entity_3')
        assert rule_match[4]['string_data'] == ''
        assert rule_match[4]['string_identifier'] == ''
        assert rule_match[4]['string_offset'] == -1

        # 4 matching strings for 'another_matching_rule'
        rule_match = mdc.host_scan['another_matching_rule']
        assert len(rule_match) == 4
        assert rule_match[2]['source'].endswith('snap/signal-desktop/350/opt/Signal/resources/app.asar')
        assert rule_match[2]['string_data'] == ' #!/bin/sh'
        assert rule_match[2]['string_identifier'] == '$s0'
        assert rule_match[2]['string_offset'] == 60783814
        assert rule_match[3]['source'] == '12345'
        assert rule_match[3]['string_data'] == ' #!/bin/sh'
        assert rule_match[3]['string_identifier'] == '$s0'
        assert rule_match[3]['string_offset'] == 0

    def test_matches_scan_output(self, caplog):
        mdc = MalwareDetectionClient(conf_file=CONF_FILE)
        mdc.parse_scan_output(MATCHES_DIRECTORY_SCAN_OUTPUT)
        assert mdc.matches == 4
        assert 'DEBUG:malware_detection_client:error scanning matches/kcore: error: 4' not in caplog.text
        assert 'Matched rule XFTI_brootkit in file matches/brootkit_match' in caplog.text
        assert 'Matched rule XFTI_FinSpy in file matches/finspy_match' in caplog.text
        assert 'Matched rule XFTI_FritzFrog in file matches/fritzfrog_match' in caplog.text
        assert 'Matched rule XFTI_Mirai in file matches/mirai_match' in caplog.text
        assert len(mdc.host_scan['XFTI_brootkit']) == 4
        assert len(mdc.host_scan['XFTI_FinSpy']) == 7
        assert len(mdc.host_scan['XFTI_FritzFrog']) == 7
        assert len(mdc.host_scan['XFTI_Mirai']) == 5

        # Reduce the string_match_limit and some of the counts will change
        mdc = MalwareDetectionClient(conf_file=CONF_FILE)
        mdc.string_match_limit = 5
        mdc.parse_scan_output(MATCHES_DIRECTORY_SCAN_OUTPUT)
        assert len(mdc.host_scan['XFTI_brootkit']) == 4
        assert len(mdc.host_scan['XFTI_FinSpy']) == 5
        assert len(mdc.host_scan['XFTI_FritzFrog']) == 5
        assert len(mdc.host_scan['XFTI_Mirai']) == 5

        # Even with string_match_limit = 0, there will be 1 entry to record the source
        mdc = MalwareDetectionClient(conf_file=CONF_FILE)
        mdc.string_match_limit = 0
        mdc.parse_scan_output(MATCHES_DIRECTORY_SCAN_OUTPUT)
        assert len(mdc.host_scan['XFTI_brootkit']) == 1
        assert len(mdc.host_scan['XFTI_FinSpy']) == 1
        assert len(mdc.host_scan['XFTI_FritzFrog']) == 1
        assert len(mdc.host_scan['XFTI_Mirai']) == 1

        # With debug enabled the 'error scanning ... error: 4' will be logged
        caplog.clear()
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, debug=True)
        mdc.parse_scan_output(MATCHES_DIRECTORY_SCAN_OUTPUT)
        assert 'DEBUG:malware_detection_client:error scanning matches/kcore: error: 4' in caplog.text

    def test_error_scan_output(self, caplog):
        mdc = MalwareDetectionClient(conf_file=CONF_FILE)
        mdc.parse_scan_output(ERROR_SCAN_OUTPUT)
        assert mdc.matches == 0
        assert mdc.host_scan == {}
        assert 'error scanning /var/lib/snapd//snap/core/10859/dev/core: could not open file' in caplog.text

    def test_error4_scan_output(self, caplog):
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, debug=True)
        mdc.parse_scan_output(ERROR4_SCAN_OUTPUT)
        assert mdc.matches == 0
        assert mdc.host_scan == {}
        assert 'error scanning /var/lib/snapd/snap/core/10859/dev/core: error: 4' in caplog.text

    def test_random_output(self):
        mdc = MalwareDetectionClient(conf_file=CONF_FILE)
        mdc.parse_scan_output(RANDOM_OUTPUT)
        assert mdc.matches == 2
        rule_match = mdc.host_scan['Lorem']
        assert rule_match[0]['source'].startswith('ipsum dolor')
        assert rule_match[0]['string_data'] == ''
        assert rule_match[0]['string_identifier'] == ''
        assert rule_match[0]['string_offset'] == -1
        rule_match = mdc.host_scan['Dictum']
        assert rule_match[0]['source'].startswith('at tempor')
        assert rule_match[0]['string_data'] == ''
        assert rule_match[0]['string_identifier'] == ''
        assert rule_match[0]['string_offset'] == -1
