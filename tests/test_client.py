# Testing MalwareDetectionClient
import os
import string
import random
import unittest
from client import MalwareDetectionClient


class TestMalwareDetectionClient(unittest.TestCase):

    random_letters = ''.join(random.choice(string.ascii_lowercase) for _ in range(5))
    conf_file = "/tmp/test_modified_malware_detection_client_%s.conf" % random_letters
    test_prefix = 'tests/'
    if os.getcwd().endswith('tests'):
        test_prefix = './'
    test_rule = "%stest_rule.yar" % test_prefix
    test_rule_compiled = "%stest_rule_compiled.yar" % test_prefix
    test_client = "%stest_client.py" % test_prefix
    location_params = {'rules_location': test_rule, 'results_url': 'http://127.0.0.1/'}

    @classmethod
    def setUpClass(cls):
        # Create a conf file to be used throughout the tests
        # Conf file includes the rule_location and results_url
        if os.path.exists(cls.conf_file):
            os.remove(cls.conf_file)
        with cls.assertRaises(cls, SystemExit):
            MalwareDetectionClient(create_conf=True, conf_file=cls.conf_file,
                                   **cls.location_params)
        # Verify the location_params were written to the conf file
        with open(cls.conf_file) as cf:
            lines = cf.read().splitlines()
        cls.assertTrue(cls, 'location=%s' % cls.test_rule in lines)
        cls.assertTrue(cls, 'location=http://127.0.0.1/' in lines)

    @classmethod
    def tearDownClass(cls):
        if os.path.exists(cls.conf_file):
            os.remove(cls.conf_file)

    def assert_defaults(self, mdc):
        self.assertTrue(mdc.yara_binary in ['/usr/local/bin/yara', '/usr/bin/yara', '/bin/yara'])
        self.assertEqual(mdc.rules_file, self.test_rule)
        self.assertEqual(mdc.compiled_rules_flag, '')
        self.assertEqual(mdc.do_filesystem_scan, True)
        self.assertEqual(mdc.do_process_scan, True)
        self.assertFalse(hasattr(mdc, 'scan_fsobjects'))
        self.assertFalse(hasattr(mdc, 'scan_pids'))
        self.assertEqual(mdc.results_url, 'http://127.0.0.1/')

    def test_default_malware_detection_client_object(self):
        # With the conf file we created earlier, there is no error because we supplied a rules_location and results_url
        mdc = MalwareDetectionClient(conf_file=self.conf_file, debug=True)
        self.assert_defaults(mdc)

        # Without conf file it spits out an error because there is no rule location specified
        with self.assertRaises(SystemExit) as cm:
            with self.assertLogs() as log:
                MalwareDetectionClient()
        self.assertIn("ERROR:malware_detection_client:No location specified from which to retrieve the rules, exiting",
                      log.output)
        self.assertEqual(cm.exception.code, 1)

        # When writing a default conf file, the same error occurs
        try:
            conf_file = '/tmp/test_default_malware_detection_client_%s.conf' % self.random_letters
            if os.path.exists(conf_file):
                os.remove(conf_file)
            with self.assertRaises(SystemExit):
                MalwareDetectionClient(create_conf=True, conf_file=conf_file)
            with self.assertRaises(SystemExit) as cm:
                with self.assertLogs() as log:
                    mdc = MalwareDetectionClient(conf_file=conf_file)
            self.assertIn("ERROR:malware_detection_client:No location specified from which to retrieve the rules, exiting",
                          log.output)
            self.assertEqual(cm.exception.code, 1)
        finally:
            if os.path.exists(conf_file):
                os.remove(conf_file)

    def test_modified_malware_detection_client_object(self):
        mdc = MalwareDetectionClient(conf_file=self.conf_file, scan_entity='1')
        self.assertEqual(mdc.do_filesystem_scan, False)
        self.assertEqual(mdc.do_process_scan, True)
        self.assertFalse(hasattr(mdc, 'scan_fsobjects'))
        self.assertEqual(mdc.scan_pids, [1])

        mdc = MalwareDetectionClient(conf_file=self.conf_file, scan_entity=self.test_client)
        self.assertEqual(mdc.do_filesystem_scan, True)
        self.assertEqual(mdc.do_process_scan, False)
        self.assertEqual(mdc.scan_fsobjects, [self.test_client])
        self.assertFalse(hasattr(mdc, 'scan_pids'))

        mdc = MalwareDetectionClient(conf_file=self.conf_file)
        self.assertEqual(mdc.rules_file, self.test_rule)
        self.assertEqual(mdc.compiled_rules_flag, '')
        self.assertEqual(mdc.do_filesystem_scan, True)
        self.assertEqual(mdc.do_process_scan, True)
        self.assertFalse(hasattr(mdc, 'scan_fsobjects'))
        self.assertFalse(hasattr(mdc, 'scan_pids'))

        self.location_params['rules_location'] = self.test_rule_compiled
        mdc = MalwareDetectionClient(conf_file=self.conf_file, **self.location_params)
        self.assertEqual(mdc.rules_file, self.test_rule_compiled)
        self.assertEqual(mdc.compiled_rules_flag, '-C')

    def test_scanning_the_test_files(self):
        # Test scanning the text rules file.  Expect to find 1 match
        with self.assertLogs() as logs:
            mdc = MalwareDetectionClient(scan_entity=self.test_rule, **self.location_params)
        self.assertIn("INFO:malware_detection_client:Scan argument: file %s" % self.test_rule, logs.output)
        self.assertIn("INFO:malware_detection_client:Getting rules from %s" % self.test_rule_compiled, logs.output)

        with self.assertLogs() as logs:
            mdc.scan_filesystem()
        self.assertIn("INFO:malware_detection_client:Scanning %s ..." % self.test_rule, logs.output)
        self.assertIn("INFO:malware_detection_client:Matched rule MalwareDetectionClientRule in file %s" % self.test_rule,
                      logs.output)
        string_matches = mdc.host_scan['MalwareDetectionClientRule']
        self.assertEqual(len(string_matches), 3)  # 3 string matches
        self.assertEqual(mdc.matches, 1)  # Only 1 file match though
        self.assertEqual(string_matches[0]['source'], self.test_rule)
        self.assertEqual(string_matches[0]['string_data'], ' MalwareDetectionClient')
        self.assertEqual(string_matches[0]['string_identifier'], '$text1')
        self.assertEqual(string_matches[0]['string_offset'], 118)
        self.assertEqual(string_matches[1]['source'], self.test_rule)
        self.assertEqual(string_matches[1]['string_data'], ' sent"')
        self.assertEqual(string_matches[1]['string_identifier'], '$text2')
        self.assertEqual(string_matches[1]['string_offset'], 35)
        self.assertEqual(string_matches[2]['source'], self.test_rule)
        self.assertEqual(string_matches[2]['string_data'], ' ata_sff\\x00bioset\\x00bond0\\x00cifsd\\x00')
        self.assertEqual(string_matches[2]['string_identifier'], '$text3')
        self.assertEqual(string_matches[2]['string_offset'], 45)
        self.assertFalse(mdc.scan_processes())

        # Test scanning this test_client.py file.  Expect to find 10 matches (with string_match_limit set to 10)
        mdc = MalwareDetectionClient(scan_entity=self.test_client, **self.location_params)
        self.assertEqual(mdc.string_match_limit, 10)
        mdc.scan_filesystem()
        string_matches = mdc.host_scan['MalwareDetectionClientRule']
        self.assertEqual(len(string_matches), 10)  # Because string_match_limit = 10
        self.assertEqual(mdc.matches, 1)  # Only 1 file match though
        self.assertEqual(string_matches[0]['source'], self.test_client)
        self.assertEqual(string_matches[0]['string_data'], ' MalwareDetectionClient')
        self.assertEqual(string_matches[0]['string_identifier'], '$text1')
        self.assertAlmostEqual(string_matches[0]['string_offset'], 50, delta=50)  # First match is near the start of the file

        # Increase string_match_limit and scan again.  Expect to find more than 10 matches
        mdc.string_match_limit = 100
        mdc.scan_filesystem()
        string_matches = mdc.host_scan['MalwareDetectionClientRule']
        self.assertGreater(len(string_matches), 10)

        # Test scanning this tests directory.  Expect to find 10 matches (with string_match_limit set to 10)
        mdc = MalwareDetectionClient(scan_entity=self.test_prefix, **self.location_params)
        mdc.scan_filesystem()
        string_matches = mdc.host_scan['MalwareDetectionClientRule']
        self.assertEqual(len(string_matches), 10)  # Because string_match_limit = 10
        self.assertEqual(mdc.matches, 1)  # Only 1 file match though
        self.assertEqual(string_matches[0]['source'], self.test_client)
        self.assertEqual(string_matches[0]['string_data'], ' MalwareDetectionClient')
        self.assertEqual(string_matches[0]['string_identifier'], '$text1')
        self.assertAlmostEqual(string_matches[0]['string_offset'], 50, delta=50)  # First match is near the start of the file

    def test_scanning_the_test_process(self):
        # Test scanning the text rules file.  Expect to find 1 match
        test_pid = str(os.getpid())
        with self.assertLogs() as logs:
            mdc = MalwareDetectionClient(scan_entity=test_pid, **self.location_params)
        self.assertIn("INFO:malware_detection_client:Scan argument: pid %s" % test_pid, logs.output)

        self.assertFalse(mdc.scan_filesystem())
        with self.assertLogs() as logs:
            mdc.scan_processes()
        self.assertIn("INFO:malware_detection_client:Scanning pid %s ..." % test_pid, logs.output)
        self.assertIn("INFO:malware_detection_client:Matched rule MalwareDetectionClientRule in pid %s" % test_pid,
                      logs.output)
        string_matches = mdc.host_scan['MalwareDetectionClientRule']
        self.assertEqual(len(string_matches), 10)
        self.assertEqual(mdc.matches, 1)  # Only 1 PID matched though
        self.assertEqual(string_matches[0]['source'], test_pid)
        self.assertEqual(string_matches[0]['string_data'], ' MalwareDetectionClient')
        self.assertEqual(string_matches[0]['string_identifier'], '$text1')
        self.assertGreater(string_matches[0]['string_offset'], 0)
