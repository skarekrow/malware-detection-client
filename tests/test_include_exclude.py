import os
import pytest
from malware_detection_client import process_include_exclude_items as pinexf
from .constants import TEST_DIR, DATA_DIR, get_random_string

RANDOM_STRING = get_random_string()
DEFAULT_INCLUDE_FILE = '%s/filesystem_include.txt' % DATA_DIR
DEFAULT_EXCLUDE_FILE = '%s/filesystem_exclude.txt' % DATA_DIR
TEMP_INCLUDE_FILE = "/tmp/filesystem_include_%s.txt" % RANDOM_STRING
TEMP_EXCLUDE_FILE = "/tmp/filesystem_exclude_%s.txt" % RANDOM_STRING
TEMP_TEST_DIR = "/tmp/test_dir_%s/" % RANDOM_STRING

# Some of the toplevel directories that will be included/excluded by default when listing root (/)
TLDS = ['/boot', '/dev', '/etc', '/home', '/opt', '/proc', '/root', '/sys', '/tmp', '/usr', '/var']
INCLUDED_TLDS = ['/boot', '/etc', '/home', '/opt', '/root', '/tmp', '/usr', '/var']  # after removing exclude items
DEFAULT_EXCLUDE_LIST = ['/cgroup', '/dev', '/media', '/mnt', '/net', '/proc', '/selinux', '/sys']

@pytest.fixture
def copy_include_exclude_files():
    # Make copies of the original include/exclude files so we can modify the copies rather than the originals
    os.system('cp %s %s' % (DEFAULT_INCLUDE_FILE, TEMP_INCLUDE_FILE))
    os.system('cp %s %s' % (DEFAULT_EXCLUDE_FILE, TEMP_EXCLUDE_FILE))
    yield
    os.remove(TEMP_INCLUDE_FILE)
    os.remove(TEMP_EXCLUDE_FILE)


@pytest.fixture
def extract_tmp_files():
    os.mkdir(TEMP_TEST_DIR)
    os.system('tar -C %s -xf %s/tmp_scan_files.tgz' % (TEMP_TEST_DIR, TEST_DIR))
    yield
    os.system('rm -rf %s' % TEMP_TEST_DIR)


class TestIncludeExcludeFileProcessing:

    def test_toplevel_dirs(self):
        tlds = pinexf.get_toplevel_dirs()
        assert all([x in tlds for x in TLDS])
        assert any([x in tlds for x in DEFAULT_EXCLUDE_LIST])

    def test_get_parent_dirs(self):
        parent_dir_list = []
        pinexf.get_parent_dirs('/path/to/some/item', parent_dir_list)
        assert sorted(parent_dir_list) == ['/path', '/path/to', '/path/to/some', '/path/to/some/item']

        parent_dir_list = []
        pinexf.get_parent_dirs('/path/to/some/item', parent_dir_list, '/path')
        assert sorted(parent_dir_list) == ['/path/to', '/path/to/some', '/path/to/some/item']

        parent_dir_list = []
        pinexf.get_parent_dirs('/path/to/some/item', parent_dir_list, 'fred')
        assert sorted(parent_dir_list) == ['/path', '/path/to', '/path/to/some', '/path/to/some/item']

    def test_remove_child_items(self):
        # Simple example from the function docstring
        items = ['/path/to/some/item/child', '/path/to/another/item', '/path/to/some/item']
        assert pinexf.remove_child_items(items) == ['/path/to/another/item', '/path/to/some/item']

        # More complex test with duplicate items and items whose names start with another's name
        # (rather than start with the same path) and names with spaces in them
        items = ['/var/lib64', '/home/bob', '/var/lib/docker', '/home/bob', '/var/lib',
                 '/home/bobby-droptables', r'/home/bob/this\ is\ bobs/child', '/var/lib63/im ok', '/var/lib64/im not']
        assert pinexf.remove_child_items(items) == ['/home/bob', '/home/bobby-droptables',
                                                    '/var/lib', '/var/lib63/im ok', '/var/lib64']

        # /path is common to both so that will be all that is returned
        items = ['/path/to/another/item', '/path/to/some/item', '/path']
        assert pinexf.remove_child_items(items) == ['/path']

        # The root directory will always win
        items = ['/path/to/another/item', '/path/to/some/item', '/']
        assert pinexf.remove_child_items(items) == ['/']

        # Any non-full path items (doesn't start with /) are removed from the list
        items = ['/path/to/another/item', '', '/path/to/some/item']
        assert pinexf.remove_child_items(items) == ['/path/to/another/item', '/path/to/some/item']

    def test_remove_included_excluded_items(self):
        include_items = ['/home/bob', '/tmp', '/var/www/html']
        exclude_items = ['/home/bo', '/home/bob/exclude', '/home/bobby', '/temp', '/var/www']
        include_items = pinexf.remove_included_excluded_items(include_items, exclude_items)
        assert include_items == ['/home/bob', '/tmp']

        # Some fairly random lists similar to before
        include_items = ['/var/lib64/docker', r'/home/bob/this\ is\ bobs/child', '/var/lib/docker', '/home/bob',
                         '/var/lib', '/usr']
        exclude_items = ['/var/lib/docker2', '/home/bob', '/home/bobby-droptables', r'/home/bob/this\ is\ bobs/child',
                         '/var/lib63/im ok', '/var/lib64/im not', '/boot']
        include_items = pinexf.remove_included_excluded_items(include_items, exclude_items)
        assert include_items == ['/usr', '/var/lib', '/var/lib64/docker']

    def test_default_include_file(self, caplog):
        # Process default include file
        pinexf.INCLUDE_FILE = DEFAULT_INCLUDE_FILE
        pinexf.logger.setLevel('DEBUG')
        include_list = pinexf.process_include_items()
        assert "No items specified to be included.  Using default values" in caplog.text
        assert all([x in include_list for x in TLDS])
        assert any([x in include_list for x in DEFAULT_EXCLUDE_LIST])

    def test_default_exclude_file(self):
        # Process default exclude file
        pinexf.EXCLUDE_FILE = DEFAULT_EXCLUDE_FILE
        exclude_list = pinexf.process_exclude_items()
        assert all([x in exclude_list for x in ['/dev', '/media', '/mnt', '/proc', '/sys']])

    def test_modified_include_file(self, copy_include_exclude_files, caplog):
        # Make a copy of the default include file (via the fixture) and modify its contents
        pinexf.INCLUDE_FILE = TEMP_INCLUDE_FILE
        pinexf.logger.setLevel('DEBUG')

        # Add some valid entries to include file, esp subdirectories
        with open(TEMP_INCLUDE_FILE, 'a') as tif:
            tif.write("/etc/pam.d\n/tmp\n/var/log/\n")
        include_list = pinexf.process_include_items()
        assert include_list == ['/etc/pam.d', '/tmp', '/var/log']

        # Add some more subdirectories
        with open(TEMP_INCLUDE_FILE, 'a') as tif:
            tif.write("/etc/cron.d\n/tmp\n/var/lib/\n")
        include_list = pinexf.process_include_items()
        assert include_list == ['/etc/cron.d', '/etc/pam.d', '/tmp', '/var/lib', '/var/log']

        # Add some top level directories to override the subdirectories
        with open(TEMP_INCLUDE_FILE, 'a') as tif:
            tif.write("/etc\n/var\n")
        include_list = pinexf.process_include_items()
        assert include_list == ['/etc', '/tmp', '/var']

        # Add some invalid entries to include file
        caplog.clear()
        with open(TEMP_INCLUDE_FILE, 'a') as tif:
            tif.write("%s\n/var/run\n/missing\n" % DATA_DIR)
        include_list = pinexf.process_include_items()
        assert "Skipping partial directory path '%s' ..." % DATA_DIR in caplog.text
        assert "Skipping link '/var/run' ..." in caplog.text
        assert "Skipping missing item '/missing' ..." in caplog.text
        assert include_list == ['/etc', '/tmp', '/var']

        # Add the root directory (/) which will override all the other entries
        caplog.clear()
        with open(TEMP_INCLUDE_FILE, 'a') as tif:
            tif.write("/\n")
        include_list = pinexf.process_include_items()
        assert "Including root directory (/).  Ignoring the other items ..." in caplog.text
        assert all([x in include_list for x in TLDS])
        assert any([x in include_list for x in DEFAULT_EXCLUDE_LIST])

    def test_modified_exclude_file(self, copy_include_exclude_files, caplog):
        # Make a copy of the default exclude file (via the fixture) and modify its contents
        pinexf.EXCLUDE_FILE = TEMP_EXCLUDE_FILE
        pinexf.logger.setLevel('DEBUG')

        # Remove the default entries from the exclude file
        with open(TEMP_EXCLUDE_FILE, 'w') as tif:
            tif.write("# Removing all lines except this one\n")
        exclude_list = pinexf.process_exclude_items()
        assert "No items specified to be excluded" in caplog.text
        assert exclude_list == []

        # Add some valid entries to exclude file (links are ok in the exclude file)
        with open(TEMP_EXCLUDE_FILE, 'a') as tif:
            tif.write("/etc/ssh\n/tmp\n/var/run/\n")
        exclude_list = pinexf.process_exclude_items()
        assert all([x in exclude_list for x in ['/etc/ssh', '/tmp', '/var/run']])

        # Add some more subdirectories
        with open(TEMP_EXCLUDE_FILE, 'a') as tif:
            tif.write("/etc/cron.d\n/tmp\n/var/lock/\n")
        exclude_list = pinexf.process_exclude_items()
        assert all([x in exclude_list for x in ['/etc/cron.d', '/etc/ssh', '/tmp', '/var/lock', '/var/run']])

        # Add some top level directories to override the subdirectories
        with open(TEMP_EXCLUDE_FILE, 'a') as tif:
            tif.write("/etc\n/var\n")
        exclude_list = pinexf.process_exclude_items()
        assert all([x in exclude_list for x in ['/etc', '/tmp', '/var']])

        # Add some invalid entries to exclude file
        caplog.clear()
        with open(TEMP_EXCLUDE_FILE, 'a') as tif:
            tif.write("/\n%s\n/missing\n" % DATA_DIR)
        exclude_list = pinexf.process_exclude_items()
        assert "Skipping root directory '/' ..." in caplog.text
        assert "Skipping partial directory path '%s' ..." % DATA_DIR in caplog.text
        assert "Skipping missing item '/missing' ..." in caplog.text
        assert all([x in exclude_list for x in ['/etc', '/tmp', '/var']])

    def test_missing_include_exclude_files(self, caplog):
        pinexf.INCLUDE_FILE = "include.txt"
        pinexf.EXCLUDE_FILE = "exclude.txt"
        pinexf.logger.setLevel('DEBUG')
        include_list = pinexf.process_include_items()
        assert "Couldn't read include file 'include.txt': [Errno 2] No such file or directory" in caplog.text
        exclude_list = pinexf.process_exclude_items()
        assert "Couldn't read exclude file 'exclude.txt': [Errno 2] No such file or directory" in caplog.text
        assert all([x in include_list for x in INCLUDED_TLDS])
        assert any([x in include_list for x in DEFAULT_EXCLUDE_LIST])
        assert exclude_list == DEFAULT_EXCLUDE_LIST

    def test_process_default_include_exclude_files(self, caplog):
        # Test the process function with default include and exclude files
        pinexf.INCLUDE_FILE = DEFAULT_INCLUDE_FILE
        pinexf.EXCLUDE_FILE = DEFAULT_EXCLUDE_FILE
        pinexf.logger.setLevel('DEBUG')
        scan_dict = pinexf.process_items()
        assert "Populating scan_dict's include items ..." in caplog.text
        assert "Populating scan_dict's exclude items ..." in caplog.text
        assert "Re-populating scan_dict's include items with directory content listings" in caplog.text
        assert all([x in scan_dict for x in INCLUDED_TLDS])
        assert all([x not in scan_dict for x in DEFAULT_EXCLUDE_LIST])

    def test_process_include_exclude_files_root(self, copy_include_exclude_files, caplog):
        # Test the process function if the include and exclude files contain root (/)
        pinexf.INCLUDE_FILE = TEMP_INCLUDE_FILE
        pinexf.EXCLUDE_FILE = TEMP_EXCLUDE_FILE
        pinexf.logger.setLevel('DEBUG')

        # If / is specified in the include file it is substituted for its child directories
        # At this stage the exclude file still has its usual contents
        with open(TEMP_INCLUDE_FILE, 'w') as tif:
            tif.write("/\n")
        scan_dict = pinexf.process_items()
        assert "Including root directory (/).  Ignoring the other items ..." in caplog.text
        assert all([x in scan_dict for x in INCLUDED_TLDS])
        # None of the default exclude list items will be scanned (eg /dev, /media, /mnt, /net)
        assert all([x not in scan_dict] for x in DEFAULT_EXCLUDE_LIST)

        # Clear out the exclude file.  That will remove the given /dev, /mnt, /media, /net entries (not recommended)
        caplog.clear()
        with open(TEMP_EXCLUDE_FILE, 'w') as tif:
            tif.write("# Empty\n")
        scan_dict = pinexf.process_items()
        assert "No items specified to be excluded" in caplog.text
        assert all([x in scan_dict for x in INCLUDED_TLDS])
        # Now the default exclude list items WILL be scanned (eg /dev, /media, /mnt)
        assert any([x in scan_dict] for x in DEFAULT_EXCLUDE_LIST)

        # If / is specified in the exclude file its ignored (this will be the same as the empty file test above)
        caplog.clear()
        with open(TEMP_EXCLUDE_FILE, 'a') as tif:
            tif.write("/\n")
        scan_dict = pinexf.process_items()
        assert "Skipping root directory '/' ..." in caplog.text
        assert all([x in scan_dict for x in INCLUDED_TLDS])
        # Again, the default exclude list items WILL be scanned (eg /dev, /media, /mnt)
        assert any([x in scan_dict] for x in DEFAULT_EXCLUDE_LIST)

    def test_process_include_exclude_files_simple(self, copy_include_exclude_files, caplog):
        # Test the process function with simple modified include and exclude files
        # Simple in that the include and exclude files are modified in such a way that
        # directory listings aren't required get the list of included files
        pinexf.INCLUDE_FILE = TEMP_INCLUDE_FILE
        pinexf.EXCLUDE_FILE = TEMP_EXCLUDE_FILE
        pinexf.logger.setLevel('DEBUG')

        # Add a single toplevel directory to the include file - expect only a single directory to scan
        with open(TEMP_INCLUDE_FILE, 'w') as tif:
            tif.write("/etc\n")
        scan_dict = pinexf.process_items()
        assert list(scan_dict.keys()) == ['/etc']
        assert 'include' not in scan_dict['/etc']
        assert 'exclude' not in scan_dict['/etc']

        # Add some subdirectories to the include file
        with open(TEMP_INCLUDE_FILE, 'a') as tif:
            tif.write("/var/lib\n/var/log\n")
        scan_dict = pinexf.process_items()
        assert sorted(scan_dict.keys()) == ['/etc', '/var']
        assert sorted(list(scan_dict['/var']['include'])) == ['/var/lib', '/var/log']
        assert 'exclude' not in scan_dict['/var']

        # Add some directories to exclude that won't impact the already included directories
        with open(TEMP_EXCLUDE_FILE, 'w') as tif:
            tif.write("/tmp\n/var/run\n")
        scan_dict = pinexf.process_items()
        assert sorted(scan_dict.keys()) == ['/etc', '/var']
        assert sorted(scan_dict['/var']['include']) == ['/var/lib', '/var/log']
        assert scan_dict['/var']['exclude']['items'] == ['/var/run']

        # Exclude /var which will remove it from the list of directories to scan
        with open(TEMP_EXCLUDE_FILE, 'a') as tif:
            tif.write("/var\n")
        scan_dict = pinexf.process_items()
        assert list(scan_dict.keys()) == ['/etc']

        # Exclude /etc which means there will be no directories to scan
        caplog.clear()
        with open(TEMP_EXCLUDE_FILE, 'a') as tif:
            tif.write("/etc\n")
        with pytest.raises(SystemExit) as exc_info:
            pinexf.process_items()
        assert "ERROR:No items to scan because" in caplog.text
        assert exc_info.value.code == 1

    def test_process_include_exclude_files_complex(self, copy_include_exclude_files):
        # Test the process function with modified include and exclude files that will require more complex
        # processing to generate the list of items to be scanned
        pinexf.INCLUDE_FILE = TEMP_INCLUDE_FILE
        pinexf.EXCLUDE_FILE = TEMP_EXCLUDE_FILE
        pinexf.logger.setLevel('DEBUG')

        # Because we are including items in /var/lib, we only need to list the contents of the /var/lib directory
        # We don't need to list the contents of the /var directory
        with open(TEMP_INCLUDE_FILE, 'w') as tif:
            tif.write("/var/lib\n/var/log\n")
        with open(TEMP_EXCLUDE_FILE, 'w') as tif:
            tif.write("/var/lib/systemd\n/var/lib/misc/\n/var/log/wtmp\n")
        scan_dict = pinexf.process_items()
        assert list(scan_dict.keys()) == ['/var']
        assert sorted(scan_dict['/var']['exclude']['items']) == ['/var/lib/misc', '/var/lib/systemd', '/var/log/wtmp']
        # The exclude items shouldn't be in the include items
        # Nor should other items that aren't in the explicitly included items
        assert all([x not in scan_dict['/var']['include']
                    for x in ['/var/lib/misc', '/var/lib/systemd', '/var/log/wtmp',
                              '/var/cache', '/var/lib', '/var/log', '/var/tmp', '/tmp']])
        # In 'include' will be items that are in the same directory as the excluded items, eg /var/log/lastlog
        # but not the excluded items, eg /var/log/wtmp
        assert all([x in scan_dict['/var']['include']
                    for x in ['/var/lib/xkb', '/var/lib/dbus', '/var/log/btmp', '/var/log/lastlog']])

        # Change the include directory to /var
        # Now immediate child directories of /var will be in the include list, eg /var/cache and /var/tmp
        # Because now we have to list the contents of the /var and /var/lib directories
        with open(TEMP_INCLUDE_FILE, 'a') as tif:
            tif.write("/var\n")
        scan_dict = pinexf.process_items()
        assert list(scan_dict.keys()) == ['/var']
        assert sorted(scan_dict['/var']['exclude']['items']) == ['/var/lib/misc', '/var/lib/systemd', '/var/log/wtmp']
        assert all([x not in scan_dict['/var']['include']
                    for x in ['/var/lib/misc', '/var/lib/systemd', '/var/log/wtmp', '/var/lib', '/var/log', '/tmp']])
        assert all([x in scan_dict['/var']['include']
                    for x in ['/var/cache', '/var/tmp', '/var/lib/xkb', '/var/lib/dbus',
                              '/var/log/btmp', '/var/log/lastlog']])

    def test_process_include_exclude_files_similar_names(self, copy_include_exclude_files):
        # Now test including/excluding items that have similar names, eg /usr/local/lib and /usr/local/libexec
        pinexf.INCLUDE_FILE = TEMP_INCLUDE_FILE
        pinexf.EXCLUDE_FILE = TEMP_EXCLUDE_FILE
        pinexf.logger.setLevel('DEBUG')

        # /usr/local has sub directories /usr/local/lib and /usr/local/libexec (ie similar names)
        # If we exclude /usr/local/lib then /usr/local/libexec should still be included
        with open(TEMP_INCLUDE_FILE, 'w') as tif:
            tif.write("/usr/local\n")
        with open(TEMP_EXCLUDE_FILE, 'w') as tif:
            tif.write("/usr/local/lib\n")
        scan_dict = pinexf.process_items()
        assert list(scan_dict.keys()) == ['/usr']
        assert list(scan_dict['/usr']['exclude']['items']) == ['/usr/local/lib']
        # Ensure /usr/local/lib is NOT in the list of items to scan
        assert all([x not in scan_dict['/usr']['include']
                    for x in ['/usr', '/usr/lib', '/usr/local', '/usr/local/lib']])
        # But ensure /usr/local/libexec IS in the list of items to scan
        assert all([x in scan_dict['/usr']['include']
                    for x in ['/usr/local/bin', '/usr/local/share', '/usr/local/libexec']])

        # Add /usr/local/libexec as an item to exclude and ensure both /usr/local/lib and libexec are excluded now
        with open(TEMP_EXCLUDE_FILE, 'a') as tif:
            tif.write("/usr/local/libexec\n")
        scan_dict = pinexf.process_items()
        assert list(scan_dict.keys()) == ['/usr']
        assert sorted(scan_dict['/usr']['exclude']['items']) == ['/usr/local/lib', '/usr/local/libexec']
        # Ensure /usr/local/lib and /usr/local/libexec are both not in the list of items to scan
        assert all([x not in scan_dict['/usr']['include']
                    for x in ['/usr', '/usr/lib', '/usr/local', '/usr/local/lib', '/usr/local/libexec']])
        assert all([x in scan_dict['/usr']['include']
                    for x in ['/usr/local/bin', '/usr/local/share']])

        # Test including /usr/local/lib and excluding an item from it
        # Confirm that only items from /usr/local/lib are included and NOT from any other directory
        usr_local_lib = sorted(filter(lambda x: not os.path.islink(x),
                                      map(lambda x: '/usr/local/lib/' + x, os.listdir('/usr/local/lib'))))
        assert len(usr_local_lib) > 2
        excluded_item1 = usr_local_lib[0]
        excluded_item2 = usr_local_lib[1]
        with open(TEMP_INCLUDE_FILE, 'w') as tif:
            tif.write("/usr/local/lib\n")
        with open(TEMP_EXCLUDE_FILE, 'w') as tif:
            tif.write("%s\n%s\n" % (excluded_item1, excluded_item2))
        scan_dict = pinexf.process_items()
        assert list(scan_dict.keys()) == ['/usr']
        assert sorted(scan_dict['/usr']['exclude']['items']) == [excluded_item1, excluded_item2]
        # Ensure only /usr/local/lib items are included (except the first 2 in the directory)
        assert all([x not in scan_dict['/usr']['include']
                    for x in ['/usr', '/usr/local', '/usr/local/lib', '/usr/local/libexec',
                              excluded_item1, excluded_item2]])
        assert all([x in scan_dict['/usr']['include'] for x in usr_local_lib[2:]])

    def test_process_include_exclude_tmp_files(self, copy_include_exclude_files, extract_tmp_files):
        # Test the including/excluding some of the files in the tmp archive
        # Specifically tests excluding link files (good or broken) and  pipe files (as well as explicit exclude items)
        pinexf.INCLUDE_FILE = TEMP_INCLUDE_FILE
        pinexf.EXCLUDE_FILE = TEMP_EXCLUDE_FILE
        pinexf.logger.setLevel('DEBUG')

        include_items = list(map(lambda x: TEMP_TEST_DIR + x, ['scan_me', 'scan_me_too']))
        exclude_items = list(map(lambda x: TEMP_TEST_DIR + x,
                                 ['scan_me_not', 'scan_me/dont_scan_me', 'scan_me_too/dont_scan_me_too']))
        with open(TEMP_INCLUDE_FILE, 'w') as tif:
            tif.write("\n".join(include_items))
        with open(TEMP_EXCLUDE_FILE, 'w') as tef:
            tef.write("\n".join(exclude_items))
        scan_dict = pinexf.process_items()
        assert list(scan_dict.keys()) == ['/tmp']
        assert sorted(list(scan_dict['/tmp']['exclude']['items'])) == sorted(exclude_items)

        include_files = sorted(list(map(lambda x: TEMP_TEST_DIR + x,
                                        ['scan_me/new_file', 'scan_me/old_file', 'scan_me/scan_me',
                                         'scan_me/scan_me_file', 'scan_me_too/new_file', 'scan_me_too/old_file',
                                         'scan_me_too/scan_me_too', 'scan_me_too/scan_me_too_file'])))
        dont_include_files = sorted(list(map(lambda x: TEMP_TEST_DIR + x,
                                             ['scan_me/link_file', 'scan_me/pipe_file', 'scan_me/broken_link',
                                              'scan_me/dont_scan_me', 'scan_me_too/link_file', 'scan_me_too/pipe_file',
                                              'scan_me_too/broken_link', 'scan_me_too/dont_scan_me_too'])))
        assert sorted(scan_dict['/tmp']['include']) == include_files
        assert all([x not in scan_dict['/tmp']['include'] for x in dont_include_files])

        # Another test to assert a bug I found is fixed ... due to only having scan_items = set([])
        # Basically include_files should = ['scan_me/scan_me'] but the bug made include_files = []
        include_items = list(map(lambda x: TEMP_TEST_DIR + x, ['scan_me/scan_me']))
        exclude_items = list(map(lambda x: TEMP_TEST_DIR + x, ['scan_me_not']))
        with open(TEMP_INCLUDE_FILE, 'w') as tif:
            tif.write("\n".join(include_items))
        with open(TEMP_EXCLUDE_FILE, 'w') as tef:
            tef.write("\n".join(exclude_items))
        scan_dict = pinexf.process_items()

        include_files = sorted(list(map(lambda x: TEMP_TEST_DIR + x, ['scan_me/scan_me'])))
        assert sorted(scan_dict['/tmp']['include']) == include_files
        dont_include_files = sorted(list(map(lambda x: TEMP_TEST_DIR + x,
                                             ['scan_me/scan_me_file', 'scan_me/dont_scan_me', 'scan_me/scan_me/here_i_am'])))
        assert all([x not in scan_dict['/tmp']['include'] for x in dont_include_files])
