import pytest
from malware_detection_client import MalwareDetectionClient
from .constants import *


class TestMalwareDetectionClient:

    def test_default_options(self, caplog):
        # When creating a new/default conf file, there will be errors
        # until the rules_location and results_url are populated
        new_conf_file = '/tmp/test_default_malware_detection_client_%s.conf' % get_random_string()
        try:
            remove_conf_file(conf_file=new_conf_file)
            # Client exits after creating a conf, so catch that
            with pytest.raises(SystemExit):
                MalwareDetectionClient(create_conf=True, conf_file=new_conf_file)

            # No rule location specified, so exit with error
            with pytest.raises(SystemExit) as exc_info:
                MalwareDetectionClient(conf_file=new_conf_file)
            assert "No location specified from which to retrieve the rules, exiting" in caplog.text
            assert exc_info.value.code == 1

            # Now we specify a rule_location but no results location, so exit with error about results location
            with pytest.raises(SystemExit) as exc_info:
                MalwareDetectionClient(conf_file=new_conf_file, rules_location=RULES_COMPILED)
            assert "No location specified to which to upload results, exiting" in caplog.text
            assert exc_info.value.code == 1
        finally:
            remove_conf_file(conf_file=new_conf_file)

    def test_conf_file_fixture(self):
        # With the conf file created by the fixture, these are the expected values
        # and there will be no errors because we supply the rules_location and results_url
        mdc = MalwareDetectionClient(conf_file=CONF_FILE)
        assert mdc.yara_binary in ['/usr/local/bin/yara', '/usr/bin/yara', '/bin/yara']
        assert mdc.rules_file == RULES_COMPILED
        assert mdc.results_url == RESULTS_URL
        assert mdc.compiled_rules_flag == '-C'
        assert mdc.do_filesystem_scan is True
        assert mdc.do_process_scan is True
        assert not hasattr(mdc, 'scan_fsobjects')
        assert not hasattr(mdc, 'scan_pids')

    def test_modified_options(self):
        # Using the conf file from the fixture but with different options
        # Use a text rules file, expect the compiled_rules_flag is empty
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, rules_location=RULE1)
        assert mdc.rules_file == RULE1
        assert mdc.compiled_rules_flag == ''

        # Test scanning just a PID, expect just the do_process_scan to be True
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, scan_entity='1')
        assert mdc.do_filesystem_scan is False
        assert mdc.do_process_scan is True
        assert not hasattr(mdc, 'scan_fsobjects')
        assert mdc.scan_pids == [1]

        # Test scanning just a file, expect just the do_filesystems_scan to be True
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, scan_entity=TEST_CLIENT)
        assert mdc.do_filesystem_scan is True
        assert mdc.do_process_scan is False
        assert mdc.scan_fsobjects == [TEST_CLIENT]
        assert not hasattr(mdc, 'scan_pids')

    def test_scanning_tests_files(self, caplog):
        # Scan the compiled rules file ... with the compiled rules file
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, scan_entity=RULES_COMPILED)
        mdc.scan_filesystem()
        assert "Scan argument: file %s" % RULES_COMPILED in caplog.text
        assert "Getting rules from %s" % RULES_COMPILED in caplog.text
        assert "Scanning %s ..." % RULES_COMPILED in caplog.text
        assert "Matched rule MalwareDetectionClientRule in file %s" % RULES_COMPILED in caplog.text
        assert "Matched rule MiscellaneousStringsRule in file %s" % RULES_COMPILED in caplog.text
        # Matched 2 rules
        assert mdc.matches == 2
        # Matched rule strings 3 times
        string_matches = sum([len(mdc.host_scan[x]) for x in mdc.host_scan])
        assert string_matches == 3

        rule_match = mdc.host_scan['MalwareDetectionClientRule']
        assert rule_match[0]['source'] == RULES_COMPILED
        assert rule_match[0]['string_data'] == ' MalwareDetectionClient'
        assert rule_match[0]['string_identifier'] == '$text1'
        assert rule_match[0]['string_offset'] <= 544

        rule_match = mdc.host_scan['MiscellaneousStringsRule']
        assert rule_match[0]['source'] == RULES_COMPILED
        assert rule_match[0]['string_data'] == ' sent"'
        assert rule_match[0]['string_identifier'] == '$string1'
        assert rule_match[0]['string_offset'] == 601
        assert rule_match[1]['source'] == RULES_COMPILED
        assert rule_match[1]['string_data'] == ' ata_sff\\x00bioset\\x00bond0\\x00cifsd\\x00'
        assert rule_match[1]['string_identifier'] == '$string2'
        assert rule_match[1]['string_offset'] == 616
        assert mdc.scan_processes() is False

        # Scan this test_malware_detection_client.py file
        # Expect to find 10 matches (because string_match_limit set to 10)
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, scan_entity=TEST_CLIENT)
        assert mdc.string_match_limit == 10
        mdc.scan_filesystem()
        assert mdc.matches == 2  # Matches the two rules
        rule_match = mdc.host_scan['MalwareDetectionClientRule']
        assert len(rule_match) == 10  # Because string_match_limit = 10
        assert rule_match[0]['source'] == TEST_CLIENT
        assert rule_match[0]['string_data'] == ' MalwareDetectionClient'
        assert rule_match[0]['string_identifier'] == '$text1'
        # First match is near the start of the file
        assert rule_match[0]['string_offset'] < 200

        # Increase string_match_limit and scan again.  Expect to find more than 10 matches
        mdc.string_match_limit = 100
        mdc.scan_filesystem()
        rule_match = mdc.host_scan['MalwareDetectionClientRule']
        assert len(rule_match) > 10

    def test_scanning_tests_directory(self, caplog):
        # Test scanning all the files in the tests directory
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, scan_entity=TEST_DIR)
        mdc.scan_filesystem()
        assert "Scan argument: directory %s" % TEST_DIR in caplog.text
        assert "Getting rules from %s" % RULES_COMPILED in caplog.text
        assert "Scanning %s ..." % TEST_DIR in caplog.text
        assert "Matched rule MalwareDetectionClientRule in file %s" % RULE1 in caplog.text
        assert "Matched rule MiscellaneousStringsRule in file %s" % RULE2 in caplog.text
        # By default, there will be no rules matched in RULES_COMPILED because we skip it
        # (It's the rules_file so naturally it would cause matches)
        assert "in file %s" % RULES_COMPILED not in caplog.text

        # Expect 8 matches ...
        # - MalwareDetectionClientRule to match test_rule1, conftest and the 3 test_* files
        # - MiscellaneousStringsRule to match test_rule2, test_*client and test_network*
        assert mdc.matches == 8
        # Expect MalwareDetectionClientRule to match 1 string in test_rule1
        # and > 10 strings in test_malware_detection_client & multiple in the other test_* files
        rule_match = mdc.host_scan['MalwareDetectionClientRule']
        rule_match_sources = [rm['source'] for rm in rule_match]
        assert RULE1 in rule_match_sources
        # RULE1 appears once in all the source fields
        assert len(list(filter(lambda x: x == RULE1, rule_match_sources))) == 1
        assert TEST_CLIENT in rule_match_sources
        assert len(list(filter(lambda x: x == TEST_CLIENT, rule_match_sources))) == 10
        assert TEST_PARSE in rule_match_sources
        assert len(list(filter(lambda x: x == TEST_PARSE, rule_match_sources))) > 5
        assert TEST_NETWORK in rule_match_sources
        assert len(list(filter(lambda x: x == TEST_NETWORK, rule_match_sources))) > 5
        assert RULE2 not in rule_match_sources

        # Expect MiscellaneousStringsRule to match 2 strings in test_rule2
        # and >= 1 strings in test_malware_detection_client & test_network_functions
        rule_match = mdc.host_scan['MiscellaneousStringsRule']
        rule_match_sources = [rm['source'] for rm in rule_match]
        assert RULE2 in rule_match_sources
        assert len(list(filter(lambda x: x == RULE2, rule_match_sources))) == 2
        assert TEST_CLIENT in rule_match_sources
        assert len(list(filter(lambda x: x == TEST_CLIENT, rule_match_sources))) == 1
        assert TEST_NETWORK in rule_match_sources
        assert len(list(filter(lambda x: x == TEST_NETWORK, rule_match_sources))) == 1
        assert TEST_PARSE not in rule_match_sources
        assert RULE1 not in rule_match_sources

    def test_scanning_pytest_process(self, caplog):
        # Scan the python pytest process whilst its running the tests
        test_pid = str(os.getpid())
        mdc = MalwareDetectionClient(conf_file=CONF_FILE, scan_entity=test_pid)
        assert "Scan argument: pid %s" % test_pid in caplog.text

        assert mdc.scan_filesystem() is False
        mdc.scan_processes()
        assert "Scanning pid %s ..." % test_pid in caplog.text
        assert "Matched rule MalwareDetectionClientRule in PID %s" % test_pid in caplog.text
        # Matches both rules in the PID
        assert mdc.matches == 2
        rule_match = mdc.host_scan['MalwareDetectionClientRule']
        assert len(rule_match) == 10
        assert rule_match[0]['source'] == test_pid
        assert rule_match[0]['string_data'] == ' MalwareDetectionClient'
        assert rule_match[0]['string_identifier'] == '$text1'
        assert rule_match[0]['string_offset'] > 0
