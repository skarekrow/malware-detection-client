# Creates virtualenvs for python 2 & 3, if those versions of python exist on the system
sudo_wrapper = sudoclient
venv2:
	test -d venv2 || virtualenv-2 venv2 --python $$(which python2) || virtualenv venv2 --python $$(which python2)
	sed 's/venv3/venv2/g' $(sudo_wrapper) > venv2/bin/$(sudo_wrapper) && chmod 755 venv2/bin/$(sudo_wrapper)
	./venv2/bin/python -m pip install -e .[dev]

venv3:
	test -d venv3 || virtualenv-3 venv3 --python $$(which python3) || virtualenv venv3 --python $$(which python3)
	sed 's/venv2/venv3/g' $(sudo_wrapper) > venv3/bin/$(sudo_wrapper) && chmod 755 venv3/bin/$(sudo_wrapper)
	./venv3/bin/python -m pip install -e .[dev]

# Causes venv2 & venv3 to re-run `pip install -e .` each time, otherwise it would be skipped after the initial run
.PHONY: venv2 venv3


# Create the RHEL7 & RHEL8 rpms
# Run this outside of a virtual env and on the target RHEL machine (ie RHEL7 or RHEL8)
# Modifies setup.cfg depending on whether its a RHEL7 or RHEL8 machine
rpm:
	if uname -r | grep -q '\.el7'; then \
		sed -i -e 's/python3-/python-/' setup.cfg; \
		python setup.py bdist_rpm; \
	else \
		sed -i -e 's/python-/python3-/' setup.cfg; \
		python3 setup.py bdist_rpm; \
	fi

# (Re)Install the rpm after building it
install-rpm: rpm
	$(eval new_rpm_file = $(shell ls -tr dist/malware-detection-client*noarch.rpm | tail -n1))
	rpm -q malware-detection-client && \
	sudo yum -y reinstall $(new_rpm_file) || \
	sudo yum -y localinstall $(new_rpm_file)

# (Re)install the rpm & (re)start the systemd service
install-start: install-rpm restart-service

# (Re)start the systemd service and check on its status
restart-service:
	sudo systemctl restart malware-detection-client
	sleep 3
	systemctl status malware-detection-client -l


# Run various tests
test: clean-test
	flake8 --ignore E501 --filename "*" src/
	python -B -m pytest -v tests

test-client: clean-test
	python -B -m pytest -v tests/test_malware_detection_client.py

test-parse: clean-test
	python -B -m pytest -v tests/test_parse_scan_output.py

test-net: clean-test
	python -B -m pytest -v tests/test_network_functions.py

test-line: clean-test
	python -B -m pytest -v tests/test_line_metadata.py

tests: test


# Perform various file/directory cleanups
# Clean all returns the repo back to initial state (removes venv and test cache dirs too)
clean-all: clean clean-venv
	rm -rf .pytest_cache
	rm -rf .tox

clean:
	rm -rf build dist src/*.egg-info
	find . -name '*.pyc' -delete
	find . -type d -name '__pycache__' -delete

clean-tests:
	find tests -name '*.pyc' -delete
	find tests -type d -name '__pycache__' -delete

clean-test: clean-tests

clean-venv:
	rm -rf venv*
